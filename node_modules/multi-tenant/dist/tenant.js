"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getModelByTenant = exports.getTenantDB = void 0;
const getTenantDB = ({ tenantId, }) => __awaiter(void 0, void 0, void 0, function* () {
    let dbConnection = yield global.clientConnection;
    const models = global.models;
    if (dbConnection) {
        const PREFIX_DB = process.env.PREFIX_DB;
        const dbName = PREFIX_DB ? PREFIX_DB + tenantId : tenantId;
        const MULTIPLE_DATABASE = process.env.MULTIPLE_DATABASE;
        if (MULTIPLE_DATABASE ||
            (typeof MULTIPLE_DATABASE === 'string' && MULTIPLE_DATABASE === 'true')) {
            dbConnection = yield dbConnection.useDb(dbName, {
                //ensures connections to the same databases are cached
                useCache: true,
                //remove event listeners from the main connection
                noListener: true,
            });
        }
        if (Array.isArray(models)) {
            models.forEach(({ name, schema }) => {
                if (name && schema) {
                    dbConnection.model(name, schema);
                }
            });
        }
        return dbConnection;
    }
    throw new Error('Connection to database failed');
});
exports.getTenantDB = getTenantDB;
const getModelByTenant = ({ tenantId, name, }) => __awaiter(void 0, void 0, void 0, function* () {
    // console.log(`getModelByTenant tenantId : ${tenantId}.`);
    const tenantDb = yield (0, exports.getTenantDB)({
        tenantId: tenantId ? tenantId : global.tenantId,
    });
    return tenantDb.model(name);
});
exports.getModelByTenant = getModelByTenant;
