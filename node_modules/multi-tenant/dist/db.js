"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initClientDbConnection = exports.loadModel = void 0;
const mongoose_1 = require("mongoose");
const path_1 = require("path");
const fs_1 = require("fs");
const clientOption = {
    socketTimeoutMS: 10000,
    keepAlive: true,
    // useNewUrlParser: true,
    // autoIndex: true,
    // useCreateIndex: true,
    // useUnifiedTopology: true,
    connectTimeoutMS: 360000,
};
const loadModel = ({ path }) => {
    const modelPath = path;
    if (!(0, fs_1.existsSync)(modelPath)) {
        console.log('The models storage directory does not exist');
        throw new Error('The models storage directory does not exist');
    }
    const models = (0, fs_1.readdirSync)(modelPath)
        .filter((file) => file.indexOf('.') !== 0 && file.slice(-3))
        .map((file) => {
        return require((0, path_1.resolve)(modelPath, file)) &&
            require((0, path_1.resolve)(modelPath, file)).default
            ? require((0, path_1.resolve)(modelPath, file)).default
            : require((0, path_1.resolve)(modelPath, file));
    });
    return models;
};
exports.loadModel = loadModel;
const initClientDbConnection = () => {
    const MONGODB_URI = process.env.MONGODB_URI;
    const db = (0, mongoose_1.createConnection)(MONGODB_URI, clientOption);
    db.on('error', console.error.bind(console, 'MongoDB Connection Error: '));
    db.once('open', function () {
        console.log('client MongoDB Connection ok in multi-tenant package!');
    });
    return db;
};
exports.initClientDbConnection = initClientDbConnection;
